deployment_group:
  prod:
    pipeline_id: 1124
    name: tk-hiero-export
    # optional
    package_file: tk-hiero-export

shotgun:
  server_url: "https://fractalpicture.shotgunstudio.com"
  script_name: "package-manager"
  api_key: "pbzqjukwgeruiu6vqR~bdoamk"

# remote repo which would get cloned and yml file will be updated
# with new deployed version
#config_git: git@github.com:fractal-picture/tk-fp-config.git
config_path: "${FP_TOOLS}/pipecrew/mgangaiwar/workspace/FractalPicture/toolkit/tk-fp-config"
bundle_name: tk-hiero-export

# all the dirs, files which need to be packaged
includes:
  - hooks
  - python
  - docs
  - tests
  - app.py
  - icon_256.png
  - info.yml
  - LICENSE
  - README.md


pre_build:
  Windows_AMD64:
  |
    echo "  # Removing all pyc files.."
    DEL /S *.pyc
    echo "  # Updating version in app.py .."
    "C:\fractal\packages\python\2.7.18\platform-windows\python.exe" -c "with open('app.py') as fh: d = fh.read();import re;print re.findall('''(__version__.+.)(\d+.\d+.\d+)''', d)[0][-1]" > version_str
    set /p ver_str=<version_str
    echo "  # Replacing %ver_str% -> %PACKAGE_VERSION% app.py .."
    "C:\fractal\packages\python\2.7.18\platform-windows\python.exe" -c "with open('app.py') as rh: d = rh.read(); import os; nd=d.replace(os.getenv('ver_str'), os.getenv('PACKAGE_VERSION'));ph=open('app.py', 'w');ph.write(nd)"
    rm version_str

  Linux_x86_64:
  |
    echo "Deleting all pyc files.."
    find . -name '*.pyc' -delete
    find . -name '*__pycache__*' -delete
    echo "  Updating version in app.py .."
    rez-python -c "with open('app.py') as fh: d = fh.read();import re;print(re.findall('''(__version__) = .((\d+)+.(\d+)+.(\d+)+).''', d)[0][1])" > version_str
    ver_str=$(cat ./version_str)
    export ver_str
    echo " Replacing ${ver_str} -> ${PACKAGE_VERSION} app.py .."
    rez-python -c "with open('app.py') as rh: d = rh.read(); import os; nd=d.replace(os.getenv('ver_str'), os.getenv('PACKAGE_VERSION'));ph=open('app.py', 'w');ph.write(nd)"
    rm version_str


post_deploy:

  Windows_AMD64:
  |
    echo ""
    echo "updating git origin..."
    echo ""
    echo "  # Creating tag in git.."
    git commit -am "bumped up version: "v${PACKAGE_VERSION_TAG}", SG version: "${PACKAGE_SG_VERSION}""
    git push origin master
    git tag -a "v${PACKAGE_VERSION}" --force
    git push origin "v${PACKAGE_VERSION}"

  Linux_x86_64:
  | 
    echo ""
    echo "updating git origin..."
    echo ""
    echo "  Creating tag in git.."
    git commit --no-verify -am "bumped up version: "v${PACKAGE_VERSION_TAG}", SG version: "${PACKAGE_SG_VERSION}""
    git push origin master
    read -p " Please mention release message for tag > " gitTagComment
    git tag -a "v${PACKAGE_VERSION_TAG}" -m "${gitTagComment}" --force
    git push origin "v${PACKAGE_VERSION_TAG}" --force
